제가 모르는 내용 위주로 기술됩니다.

< 산술 연산자 >

피연산자가 정수타입(byte, short, char, int)이면 연산 결과는 int 타입이다.
피연산자가 정수타입이고 그 중 하나가 long 타입이면 연산 결과는 long 타입이다.
피연산자 중 하나가 실수타입이면 연산 결과는 실수타입이다.

-> promotion(승격)하는 기준이다.

ex)

btye v1 = 10;
byte v2 = 25;
int v3 = 30;
long v4 = 100L;

int result1 = v1 + v2; // 모든 피연산자들은 int 타입으로 자동 변환 후 연산
long result2 = v1 + v2 - v4; // long으로 자동 타입 변환 후 연산
double result3 = (double)v1 / v2;  // v1이 double형으로 강제 타입 변환되어 v2도 double로 타입 변환 후 연산

if)

double reulst4 = (double)(v1 / v2);
이렇게 진행하면 먼저 byte형인 v1, v2가 int 형으로 바뀐 후 나눗셈 연산을 한다. 그리고 double형으로 바꾸므로 전제 괄호가 아닌
변수 1개만 double로 강제 타입 변환 || (double)v1 / (double)v2 이렇게 따로 해야한다.

< '/' 연산자 >

산술 연산을 정확하게 하려면 실수 타입을 사용하면 안된다.

int ver1 = 1;
double ver2 = 0.1;
int ver3 = 7;

double result1 = ver1 - ver2 * ver3;
System.out.println(result1);

실행결과 : 0.299999999999999993

double은 부동 소숫점 방식을 사용하기에 정확한 산술계산을 하려면 int형을 사용한다.

int x = 5;
int y = 0;
double result1 = x / y;  // Infinity 값을 가짐
double result2 = x % y;  // NaN 값을 가짐

이 상태에서 계속 연산을 수행하면 데이터가 엉망이 될 수 있다.

boolean = result3 = Double.isInfinite(result1);  // result1 값이 Infinity 값이 맞다면 true 아니면 false 를 가진다
boolean = result4 = Double.isNaN(result2);    // result2 값이 NaN이 맞다면 true 아니면 false 를 가진다.



< 비교 연산 >

피연산자들의 타입이 다르면 타입을 변환하여 비교한다.

ex)

char ver1 = 'A';
boolean result1 = (ver1 == 65);  // 여기서 ver1이 char -> int 로 형변환 후 비교한다(True)

if)

float ver1 = 0.1f;
double ver2 = 0.1;
boolean result1 = (ver1 == ver2);    // false가 산출됨

-> 실수 타입은 0.1을 정확히 표현할 수 없으며 float과 double의 정밀도 차이로 다른값이다.
boolean result2 = (ver1 == (float)ver2);   // 이렇게 double 형을 float으로 낮추면 같아진다.(True)


